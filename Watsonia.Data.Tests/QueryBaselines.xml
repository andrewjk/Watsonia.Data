<?xml version="1.0" encoding="utf-8"?>
<baselines>
  <baseline key="TestMathLog10">
    Select *
    From Orders
    Where Log10(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathCeiling">
    Select *
    From Orders
    Where Ceiling(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathRoundToPlace">
    Select *
    From Orders
    Where Round(Orders.OrderID, 2) Equals 0
  </baseline>
  <baseline key="TestMathFloor">
    Select *
    From Orders
    Where Floor(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathTruncate">
    Select *
    From Orders
    Where Truncate(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestStringCompareToLT">
    Select *
    From Customers
    Where Customers.City IsLessThan @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareToLE">
    Select *
    From Customers
    Where Customers.City IsLessThanOrEqualTo @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareToGT">
    Select *
    From Customers
    Where Customers.City IsGreaterThan @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareToGE">
    Select *
    From Customers
    Where Customers.City IsGreaterThanOrEqualTo @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareToEQ">
    Select *
    From Customers
    Where Customers.City Equals @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareToNE">
    Select *
    From Customers
    Where Customers.City NotEquals @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareLT">
    Select *
    From Customers
    Where Customers.City IsLessThan @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareLE">
    Select *
    From Customers
    Where Customers.City IsLessThanOrEqualTo @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareGT">
    Select *
    From Customers
    Where Customers.City IsGreaterThan @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareGE">
    Select *
    From Customers
    Where Customers.City IsGreaterThanOrEqualTo @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareEQ">
    Select *
    From Customers
    Where Customers.City Equals @0 ('Seattle')
  </baseline>
  <baseline key="TestStringCompareNE">
    Select *
    From Customers
    Where Customers.City NotEquals @0 ('Seattle')
  </baseline>
  <baseline key="TestIntCompareTo">
    Select *
    From Orders
    Where Orders.OrderID Equals 1000
  </baseline>
  <baseline key="TestDecimalCompare">
    Select *
    From Orders
    Where Orders.OrderID Equals 0.0
  </baseline>
  <baseline key="TestDecimalAdd">
    Select *
    From Orders
    Where (Orders.OrderID + 0.0) Equals 0.0
  </baseline>
  <baseline key="TestDecimalSubtract">
    Select *
    From Orders
    Where (Orders.OrderID - 0.0) Equals 0.0
  </baseline>
  <baseline key="TestDecimalMultiply">
    Select *
    From Orders
    Where (Orders.OrderID * 1.0) Equals 1.0
  </baseline>
  <baseline key="TestDecimalDivide">
    Select *
    From Orders
    Where (Orders.OrderID / 1.0) Equals 1.0
  </baseline>
  <baseline key="TestDecimalRemainder">
    Select *
    From Orders
    Where (Orders.OrderID % 1.0) Equals 0.0
  </baseline>
  <baseline key="TestDecimalNegate">
    Select *
    From Orders
    Where Negate(Orders.OrderID) Equals 1.0
  </baseline>
  <baseline key="TestDecimalRoundDefault">
    Select *
    From Orders
    Where Round(Orders.OrderID, 0) Equals 0
  </baseline>
  <baseline key="TestDecimalRoundPlaces">
    Select *
    From Orders
    Where Round(Orders.OrderID, 2) Equals 0.00
  </baseline>
  <baseline key="TestDecimalTruncate">
    Select *
    From Orders
    Where Truncate(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestDecimalCeiling">
    Select *
    From Orders
    Where Ceiling(Orders.OrderID) Equals 0.0
  </baseline>
  <baseline key="TestDecimalFloor">
    Select *
    From Orders
    Where Floor(Orders.OrderID) Equals 0.0
  </baseline>
  <baseline key="TestDecimalLT">
    Select *
    From Orders
    Where Orders.OrderID IsLessThan 0.0
  </baseline>
  <baseline key="TestIntLessThan">
    Select *
    From Orders
    Where Orders.OrderID IsLessThan 0
  </baseline>
  <baseline key="TestIntLessThanOrEqual">
    Select *
    From Orders
    Where Orders.OrderID IsLessThanOrEqualTo 0
  </baseline>
  <baseline key="TestIntGreaterThan">
    Select *
    From Orders
    Where Orders.OrderID IsGreaterThan 0
  </baseline>
  <baseline key="TestIntGreaterThanOrEqual">
    Select *
    From Orders
    Where Orders.OrderID IsGreaterThanOrEqualTo 0
  </baseline>
  <baseline key="TestIntEqual">
    Select *
    From Orders
    Where Orders.OrderID Equals 0
  </baseline>
  <baseline key="TestIntNotEqual">
    Select *
    From Orders
    Where Orders.OrderID NotEquals 0
  </baseline>
  <baseline key="TestIntAdd">
    Select *
    From Orders
    Where (Orders.OrderID + 0) Equals 0
  </baseline>
  <baseline key="TestIntSubtract">
    Select *
    From Orders
    Where (Orders.OrderID - 0) Equals 0
  </baseline>
  <baseline key="TestIntMultiply">
    Select *
    From Orders
    Where (Orders.OrderID * 1) Equals 1
  </baseline>
  <baseline key="TestIntDivide">
    Select *
    From Orders
    Where (Orders.OrderID / 1) Equals 1
  </baseline>
  <baseline key="TestIntModulo">
    Select *
    From Orders
    Where (Orders.OrderID % 1) Equals 0
  </baseline>
  <baseline key="TestIntLeftShift">
    Select *
    From Orders
    Where (Orders.OrderID &lt;&lt; 1) Equals 0
  </baseline>
  <baseline key="TestIntRightShift">
    Select *
    From Orders
    Where (Orders.OrderID &gt;&gt; 1) Equals 0
  </baseline>
  <baseline key="TestIntBitwiseAnd">
    Select *
    From Orders
    Where (Orders.OrderID &amp; 1) Equals 0
  </baseline>
  <baseline key="TestIntBitwiseOr">
    Select *
    From Orders
    Where (Orders.OrderID | 1) Equals 1
  </baseline>
  <baseline key="TestIntBitwiseExclusiveOr">
    Select *
    From Orders
    Where (Orders.OrderID ^ 1) Equals 1
  </baseline>
  <baseline key="TestIntBitwiseNot">
    Select *
    From Orders
    Where ~Orders.OrderID? Equals 0
  </baseline>
  <baseline key="TestIntNegate">
    Select *
    From Orders
    Where Negate Orders.OrderID Equals -1
  </baseline>
  <baseline key="TestAnd">
    Select *
    From Orders
    Where (Orders.OrderID IsGreaterThan 0 And Orders.OrderID IsLessThan 2000)
  </baseline>
  <baseline key="TestOr">
    Select *
    From Orders
    Where (Orders.OrderID IsLessThan 5 Or Orders.OrderID IsGreaterThan 10)
  </baseline>
  <baseline key="TestNot">
    Select *
    From Orders
    Where Not Orders.OrderID Equals 0
  </baseline>
  <baseline key="TestEqualNull">
    Select *
    From Customers
    Where Customers.City Equals Null
  </baseline>
  <baseline key="TestEqualNullReverse">
    Select *
    From Customers
    Where Null Equals Customers.City
  </baseline>
  <baseline key="TestConditional">
    Select *
    From Orders
    Where (Case When Orders.CustomerID Equals @0 ('ALFKI') Then 1000 Else 0) Equals 1000
  </baseline>
  <baseline key="TestConditional2">
    Select *
    From Orders
    Where (Case When Orders.CustomerID Equals @0 ('ALFKI') Then 1000 When Orders.CustomerID Equals @1 ('ABCDE') Then 2000 Else 0) Equals 1000
  </baseline>
  <baseline key="TestConditionalTestIsValue">
    Select *
    From Orders
    Where (Case Orders.OrderID When True Then 100 Else 200) Equals 100
  </baseline>
  <baseline key="TestConditionalResultsArePredicates">
    Select *
    From Orders
    Where (Case When Orders.CustomerID Equals @0 ('ALFKI') Then (Case When Orders.OrderID IsLessThan 10 Then True Else False) Else (Case When Orders.OrderID IsGreaterThan 10 Then True Else False)) NotEquals False
  </baseline>
  <baseline key="TestSelectManyJoined">
    Select Customers.ContactName, Orders.OrderDate
    From Customers
    Inner Join Orders On Orders.CustomerID Equals Customers.CustomerID
  </baseline>
  <baseline key="TestSelectManyJoinedDefaultIfEmpty">
    Select Customers.ContactName, Orders.OrderDate
    From Customers
    Left Join Orders On Orders.CustomerID Equals Customers.CustomerID
  </baseline>
  <baseline key="TestSelectWhereAssociation">
    Select *
    From Orders
    Left Join Customers On Customers.CustomerID Equals Orders.CustomerID
    Where Customers.City Equals @0
  </baseline>
  <baseline key="TestSelectWhereAssociations">
    Select *
    From Orders
    Left Join Customers On Customers.CustomerID Equals Orders.CustomerID
    Where Customers.City Equals @0 And Customers.Phone NotEquals @1
  </baseline>
  <baseline key="TestSelectWhereAssociationTwice">
    Select *
    From Orders
    Left Join Customers On Customers.CustomerID Equals Orders.CustomerID
    Where Customers.City Equals @0 And Customers.Phone NotEquals @1
  </baseline>
  <baseline key="TestSelectAssociation">
    Select Customers.CustomerID As CustomerID1, Customers.City, Customers.CompanyName, Customers.ContactName, Customers.Country, Customers.Phone
    From Orders
    Left Join Customers On Customers.CustomerID Equals Orders.CustomerID
  </baseline>
  <baseline key="TestSelectAssociations">
    Select Customers.City, Customers.CompanyName, Customers.ContactName, Customers.Country, Customers.CustomerID As CustomerID1, Customers.Phone
    From Orders
    Left Join Customers On Customers.CustomerID Equals Orders.CustomerID
  </baseline>
  <baseline key="TestSelectAssociationsWhereAssociations">
    Select Customers.City, Customers.CompanyName, Customers.ContactName, Customers.Country, Customers.CustomerID As CustomerID1, Customers.Phone
    From Orders
    Left Join Customers On Customers.CustomerID Equals Orders.CustomerID
    Where Customers.City Equals @0 And Customers.Phone NotEquals @1
  </baseline>
  <baseline key="TestCustomersIncludeOrders">
    Select *
    From Customers
    Left Join Orders On Orders.CustomerID Equals Customers.CustomerID

    Select *
    From Customers
  </baseline>
  <baseline key="TestCustomersIncludeOrdersDeferred">
    Select *
    From Customers

    Select *
    From
    Where Orders.CustomerID Equals @n0
  </baseline>
  <baseline key="TestCustomersIncludeOrdersViaConstructorOnly">
    Select t1.CustomerID, t1.OrderID, t1.OrderDate
    From Customers
    Left Join Orders As t1 On t1.CustomerID Equals Customers.CustomerID

    Select Customers.CustomerID, Customers.ContactName, Customers.CompanyName, Customers.Phone, Customers.City, Customers.Country
    From Customers
  </baseline>
  <baseline key="TestCustomersWhereIncludeOrders">
    Select t1.CustomerID, t1.OrderDate, t1.OrderID
    From Customers
    Left Join Orders As t1 On t1.CustomerID Equals Customers.CustomerID
    Where Customers.City Equals @0

    Select *
    From Customers
    Where Customers.City Equals @0
  </baseline>
  <baseline key="TestCustomersIncludeOrdersAndDetails">
    Select t2.OrderID, t2.ProductID
    From Customers
    Left Join Orders As t1 On t1.CustomerID Equals Customers.CustomerID
    Left Join Order Details As t2 On t2.OrderID Equals t1.OrderID

    Select t1.CustomerID, t1.OrderDate, t1.OrderID
    From Customers
    Left Join Orders As t1 On t1.CustomerID Equals Customers.CustomerID

    Select *
    From Customers
  </baseline>
  <baseline key="TestCustomersWhereIncludeOrdersAndDetails">
    Select t2.OrderID, t2.ProductID
    From Customers
    Left Join Orders As t1 On t1.CustomerID Equals Customers.CustomerID
    Left Join Order Details As t2 On t2.OrderID Equals t1.OrderID
    Where Customers.City Equals @0

    Select t1.CustomerID, t1.OrderDate, t1.OrderID
    From Customers
    Left Join Orders As t1 On t1.CustomerID Equals Customers.CustomerID
    Where Customers.City Equals @0

    Select *
    From Customers
    Where Customers.City Equals @0
  </baseline>
  <baseline key="TestInterfaceElementTypeAsGenericConstraint">
    Select Products.Discontinued, Products.ProductId, Products.ProductName
    From Products
    Where Products.ProductId Equals 5
  </baseline>
  <baseline key="TestXmlMappingSelectCustomers">
    Select Customers.ContactName
    From Customers
    Where Customers.City Equals @0
  </baseline>
  <baseline key="TestSingletonAssociationWithMemberAccess">
    Select Customers.City, Customers.CompanyName, Customers.ContactName, Customers.Country, Customers.CustomerID As CustomerID1, Customers.Phone
    From Orders
    Left Join Customers On Customers.CustomerID Equals Orders.CustomerID
    Where Customers.City Equals @0 And Customers.Phone NotEquals @1
  </baseline>
  <baseline key="TestCompareDateTimesWithDifferentNullability">
    Select *
    From Orders
    Where (Orders.OrderDate IsLessThan @0 (1/01/2013 12:00:00 AM) And Orders.OrderDate IsLessThan @1 (1/01/2013 12:00:00 AM))
  </baseline>
  <baseline key="TestContainsWithEmptyLocalList">
    Select *
    From Customers
    Where Customers.CustomerID IsIn { }
  </baseline>
  <baseline key="TestContainsWithSubQuery">
    Select *
    From Customers
    Where Customers.CustomerID IsIn (
    Select Customers.CustomerID
    From Customers
    Where Customers.City Equals @0 ('London')
    )
  </baseline>
  <baseline key="TestCombineQueriesDeepNesting">
    Select Order Details.OrderID, Order Details.ProductID
    From Order Details
    Where Exists (
    Select *
    From Orders
    Where (Exists (
    Select *
    From Customers
    Where (Customers.ContactName StartsWith @0 ('xxx') And Customers.CustomerID Equals Orders.CustomerID)
    ) And Orders.OrderID Equals Order Details.OrderID)
    )
  </baseline>
  <baseline key="TestLetWithSubquery">
    Select *, (
    Select Count(All)
    From Orders
    Where Orders.CustomerID Equals Customers.CustomerID
    )
    From Customers
  </baseline>
  <baseline key="TestSkipTakeDistinct">
    Select Distinct t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select (Rows 5-15) All
    From Customers
    Order By Customers.ContactName
    ) As t0
  </baseline>
  <baseline key="TestTakeSkipDistinct">
    Select Distinct t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select (Rows 5+) t1.City, t1.CompanyName, t1.ContactName, t1.Country, t1.CustomerID, t1.Phone
    From (
    Select (Rows 0-10) All
    From Customers
    Order By Customers.ContactName
    ) As t1
    Order By t1.ContactName
    ) As t0
  </baseline>
  <baseline key="TestFirst">
    Select (Row 0) All
    From Customers
    Order By Customers.ContactName
  </baseline>
  <baseline key="TestFirstPredicate">
    Select (Row 0) All
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName
  </baseline>
  <baseline key="TestWhereFirst">
    Select (Row 0) All
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName
  </baseline>
  <baseline key="TestFirstOrDefault">
    Select (Row 0) All
    From Customers
    Order By Customers.ContactName
  </baseline>
  <baseline key="TestFirstOrDefaultPredicate">
    Select (Row 0) All
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName
  </baseline>
  <baseline key="TestWhereFirstOrDefault">
    Select (Row 0) All
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName
  </baseline>
  <baseline key="TestReverse">
    Select *
    From Customers
    Order By Customers.ContactName Descending
  </baseline>
  <baseline key="TestReverseReverse">
    Select *
    From Customers
    Order By Customers.ContactName
  </baseline>
  <baseline key="TestReverseWhereReverse">
    Select *
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName
  </baseline>
  <baseline key="TestReverseTakeReverse">
    Select t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select (Rows 0-5) All
    From Customers
    Order By Customers.ContactName Descending
    ) As t0
    Order By t0.ContactName
  </baseline>
  <baseline key="TestReverseWhereTakeReverse">
    Select t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select (Rows 0-5) All
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName Descending
    ) As t0
    Order By t0.ContactName
  </baseline>
  <baseline key="TestLast">
    Select (Row 0) All
    From Customers
    Order By Customers.ContactName Descending
  </baseline>
  <baseline key="TestLastPredicate">
    Select (Row 0) All
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName Descending
  </baseline>
  <baseline key="TestWhereLast">
    Select (Row 0) All
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName Descending
  </baseline>
  <baseline key="TestLastOrDefault">
    Select (Row 0) All
    From Customers
    Order By Customers.ContactName Descending
  </baseline>
  <baseline key="TestLastOrDefaultPredicate">
    Select (Row 0) All
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName Descending
  </baseline>
  <baseline key="TestWhereLastOrDefault">
    Select (Row 0) All
    From Customers
    Where Customers.City Equals @0 ('London')
    Order By Customers.ContactName Descending
  </baseline>
  <baseline key="TestSingle">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSinglePredicate">
    Select *
    From Customers
    Where Customers.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestWhereSingle">
    Select *
    From Customers
    Where Customers.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestSingleOrDefault">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSingleOrDefaultPredicate">
    Select *
    From Customers
    Where Customers.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestWhereSingleOrDefault">
    Select *
    From Customers
    Where Customers.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestAnyWithSubquery">
    Select *
    From Customers
    Where Exists (
    Select *
    From Orders
    Where (Orders.CustomerID Equals Customers.CustomerID And DatePart(Year, Orders.OrderDate) Equals 1997)
    )
  </baseline>
  <baseline key="TestAnyWithSubqueryNoPredicate">
    Select *
    From Customers
    Where Exists (
    Select *
    From Orders
    Where Orders.CustomerID Equals Customers.CustomerID
    )
  </baseline>
  <baseline key="TestAnyWithLocalCollection">
    Select *
    From Customers
    Where (Customers.CustomerID Equals @0 ('ABCDE') Or Customers.CustomerID Equals @1 ('ALFKI'))
  </baseline>
  <baseline key="TestAnyTopLevel">
    Select (Case When Exists (
    Select *
    From Customers
    ) Then True Else False) As value
  </baseline>
  <baseline key="TestAllWithSubquery">
    Select *
    From Customers
    Where Not Exists (
    Select *
    From Orders
    Where (Orders.CustomerID Equals Customers.CustomerID And Not DatePart(Year, Orders.OrderDate) Equals 1997)
    )
  </baseline>
  <baseline key="TestAllWithLocalCollection">
    Select *
    From Customers
    Where (Customers.ContactName Contains @0 ('a') And Customers.ContactName Contains @1 ('e'))
  </baseline>
  <baseline key="TestAllTopLevel">
    Select (Case When Not Exists (
    Select *
    From Customers
    Where Not Customers.ContactName StartsWith @0 ('a')
    ) Then True Else False) As value
  </baseline>
  <baseline key="TestContainsWithSubquery">
    Select *
    From Customers
    Where Customers.CustomerID IsIn (
    Select Orders.CustomerID
    From Orders
    )
  </baseline>
  <baseline key="TestContainsWithLocalCollection">
    Select *
    From Customers
    Where Customers.CustomerID IsIn { @0 ('ABCDE'), @1 ('ALFKI') }
  </baseline>
  <baseline key="TestContainsTopLevel">
    Select (Case When @0 ('ALFKI') IsIn (
    Select Customers.CustomerID
    From Customers
    ) Then True Else False) As value
  </baseline>
  <baseline key="TestCoalesce">
    Select *
    From Customers
    Where Coalesce(Customers.City, @0 ('Seattle')) Equals @0 ('Seattle')
  </baseline>
  <baseline key="TestCoalesce2">
    Select *
    From Customers
    Where Coalesce(Customers.City, Customers.Country, @0 ('Seattle')) Equals @0 ('Seattle')
  </baseline>
  <baseline key="TestStringLength">
    Select *
    From Customers
    Where Length(Customers.City) Equals 7
  </baseline>
  <baseline key="TestStringStartsWithLiteral">
    Select *
    From Customers
    Where Customers.ContactName StartsWith @0 ('M')
  </baseline>
  <baseline key="TestStringStartsWithColumn">
    Select *
    From Customers
    Where Customers.ContactName StartsWith Customers.ContactName
  </baseline>
  <baseline key="TestStringEndsWithLiteral">
    Select *
    From Customers
    Where Customers.ContactName EndsWith @0 ('s')
  </baseline>
  <baseline key="TestStringEndsWithColumn">
    Select *
    From Customers
    Where Customers.ContactName EndsWith Customers.ContactName
  </baseline>
  <baseline key="TestStringContainsLiteral">
    Select *
    From Customers
    Where Customers.ContactName Contains @0 ('and')
  </baseline>
  <baseline key="TestStringContainsColumn">
    Select *
    From Customers
    Where Customers.ContactName Contains Customers.ContactName
  </baseline>
  <baseline key="TestStringConcatImplicit2Args">
    Select *
    From Customers
    Where (Customers.ContactName + @0 ('X')) Equals @0 ('X')
  </baseline>
  <baseline key="TestStringConcatExplicit2Args">
    Select *
    From Customers
    Where Concat(Customers.ContactName, @0 ('X')) Equals @0 ('X')
  </baseline>
  <baseline key="TestStringConcatExplicit3Args">
    Select *
    From Customers
    Where Concat(Customers.ContactName, @0 ('X'), Customers.Country) Equals @0 ('X')
  </baseline>
  <baseline key="TestStringConcatExplicitNArgs">
    Select *
    From Customers
    Where Concat(Customers.ContactName, @0 ('X'), Customers.Country) Equals @0 ('X')
  </baseline>
  <baseline key="TestStringIsNullOrEmpty">
    Select *
    From Customers
    Where (Customers.City Equals Null Or Customers.City Equals '')
  </baseline>
  <baseline key="TestStringToUpper">
    Select *
    From Customers
    Where ToUpper(Customers.City) Equals @0 ('SEATTLE')
  </baseline>
  <baseline key="TestStringToLower">
    Select *
    From Customers
    Where ToLower(Customers.City) Equals @0 ('seattle')
  </baseline>
  <baseline key="TestStringSubstring">
    Select *
    From Customers
    Where Substring(Customers.City, 0, 4) Equals @0 ('Seat')
  </baseline>
  <baseline key="TestStringSubstringNoLength">
    Select *
    From Customers
    Where Substring(Customers.City, 4, 8000) Equals @0 ('tle')
  </baseline>
  <baseline key="TestStringIndexOf">
    Select *
    From Customers
    Where IndexOf(Customers.City, @0 ('tt')) Equals 4
  </baseline>
  <baseline key="TestStringIndexOfChar">
    Select *
    From Customers
    Where IndexOf(Customers.City, @0 ('t')) Equals 4
  </baseline>
  <baseline key="TestStringTrim">
    Select *
    From Customers
    Where Trim(Customers.City) Equals @0 ('Seattle')
  </baseline>
  <baseline key="TestStringToString">
    Select *
    From Customers
    Where Customers.City Equals @0 ('Seattle')
  </baseline>
  <baseline key="TestStringReplace">
    Select *
    From Customers
    Where Replace(Customers.City, @0 ('ea'), @1 ('ae')) Equals @2 ('Saettle')
  </baseline>
  <baseline key="TestStringReplaceChars">
    Select *
    From Customers
    Where Replace(Customers.City, @0 ('e'), @1 ('y')) Equals @2 ('Syattly')
  </baseline>
  <baseline key="TestStringRemove">
    Select *
    From Customers
    Where Remove(Customers.City, 1, 2) Equals @0 ('Sttle')
  </baseline>
  <baseline key="TestStringRemoveNoCount">
    Select *
    From Customers
    Where Remove(Customers.City, 4, 8000) Equals @0 ('Seat')
  </baseline>
  <baseline key="TestDateTimeConstructYmd">
    Select *
    From Orders
    Where Orders.OrderDate Equals DateNew(DatePart(Year, Orders.OrderDate), 1, 1)
  </baseline>
  <baseline key="TestDateTimeConstructYmdhms">
    Select *
    From Orders
    Where Orders.OrderDate Equals DateNew(DatePart(Year, Orders.OrderDate), 1, 1, 10, 25, 55)
  </baseline>
  <baseline key="TestDateTimeDay">
    Select *
    From Orders
    Where DatePart(Day, Orders.OrderDate) Equals 5
  </baseline>
  <baseline key="TestDateTimeMonth">
    Select *
    From Orders
    Where DatePart(Month, Orders.OrderDate) Equals 12
  </baseline>
  <baseline key="TestDateTimeYear">
    Select *
    From Orders
    Where DatePart(Year, Orders.OrderDate) Equals 1997
  </baseline>
  <baseline key="TestDateTimeHour">
    Select *
    From Orders
    Where DatePart(Hour, Orders.OrderDate) Equals 6
  </baseline>
  <baseline key="TestDateTimeMinute">
    Select *
    From Orders
    Where DatePart(Minute, Orders.OrderDate) Equals 32
  </baseline>
  <baseline key="TestDateTimeSecond">
    Select *
    From Orders
    Where DatePart(Second, Orders.OrderDate) Equals 47
  </baseline>
  <baseline key="TestDateTimeMillisecond">
    Select *
    From Orders
    Where DatePart(Millisecond, Orders.OrderDate) Equals 200
  </baseline>
  <baseline key="TestDateTimeDayOfYear">
    Select *
    From Orders
    Where DatePart(DayOfYear, Orders.OrderDate) Equals 360
  </baseline>
  <baseline key="TestDateTimeDayOfWeek">
    Select *
    From Orders
    Where DatePart(DayOfWeek, Orders.OrderDate) Equals 5
  </baseline>
  <baseline key="TestMathAbs">
    Select *
    From Orders
    Where Absolute(Orders.OrderID) Equals 10
  </baseline>
  <baseline key="TestMathAtan">
    Select *
    From Orders
    Where Atan(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathCos">
    Select *
    From Orders
    Where Cos(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathSin">
    Select *
    From Orders
    Where Sin(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathTan">
    Select *
    From Orders
    Where Tan(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathExp">
    Select *
    From Orders
    Where Exponential(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathLog">
    Select *
    From Orders
    Where Log(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathSqrt">
    Select *
    From Orders
    Where Root(Orders.OrderID, 2) Equals 0
  </baseline>
  <baseline key="TestMathPow">
    Select *
    From Orders
    Where Power((Case When Orders.OrderID IsLessThan 1000 Then 1 Else 2), 3) Equals 0
  </baseline>
  <baseline key="TestMathRoundDefault">
    Select *
    From Orders
    Where Round(Orders.OrderID, 0) Equals 0
  </baseline>
  <baseline key="TestMathAcos">
    Select *
    From Orders
    Where Acos(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathAsin">
    Select *
    From Orders
    Where Asin(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathAtan2">
    Select *
    From Orders
    Where Atan2(Orders.OrderID) Equals 0
  </baseline>
  <baseline key="TestWhere">
    Select *
    From Customers
    Where Customers.City Equals @0 ('London')
  </baseline>
  <baseline key="TestWhereTrue">
    Select *
    From Customers
    Where True NotEquals False
  </baseline>
  <baseline key="TestWhereFalse">
    Select *
    From Customers
    Where False NotEquals False
  </baseline>
  <baseline key="TestCompareEntityEqual">
    Select *
    From Customers
    Where Customers.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestCompareEntityNotEqual">
    Select *
    From Customers
    Where Not Customers.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestCompareConstructedEqual">
    Select *
    From Customers
    Where Customers.City Equals @0 ('London')
  </baseline>
  <baseline key="TestCompareConstructedMultiValueEqual">
    Select *
    From Customers
    Where (Customers.City Equals @0 ('London') And Customers.Country Equals @1 ('UK'))
  </baseline>
  <baseline key="TestCompareConstructedMultiValueNotEqual">
    Select *
    From Customers
    Where Not (Customers.City Equals @0 ('London') And Customers.Country Equals @1 ('UK'))
  </baseline>
  <baseline key="TestCompareConstructed">
    Select *
    From Customers
    Where Customers.City Equals @0 ('London')
  </baseline>
  <baseline key="TestSelectScalar">
    Select Customers.City
    From Customers
  </baseline>
  <baseline key="TestSelectAnonymousOne">
    Select (Customers.City)
    From Customers
  </baseline>
  <baseline key="TestSelectAnonymousTwo">
    Select (Customers.City, Customers.Phone)
    From Customers
  </baseline>
  <baseline key="TestSelectAnonymousThree">
    Select (Customers.City, Customers.Phone, Customers.Country)
    From Customers
  </baseline>
  <baseline key="TestSelectCustomerTable">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSelectCustomerIdentity">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSelectAnonymousWithObject">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSelectAnonymousNested">
    Select Customers.City, Customers.Country
    From Customers
  </baseline>
  <baseline key="TestSelectAnonymousEmpty">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSelectAnonymousLiteral">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSelectConstantInt">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSelectConstantNullString">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSelectLocal">
    Select *
    From Customers
  </baseline>
  <baseline key="TestSelectNestedCollection">
    Select Customers.CustomerID
    From Customers
    Where Customers.City Equals @0 ('London')

    Select Orders.OrderID
    From Orders
    Where (Orders.CustomerID Equals @n0 And DatePart(Year, Orders.OrderDate) Equals 1997)
  </baseline>
  <baseline key="TestSelectNestedCollectionInAnonymousType">
    Select t1.CustomerID, t1.OrderID
    From Customers
    Left Join Orders As t1 On (t1.CustomerID Equals Customers.CustomerID And DatePart(Year, t1.OrderDate) Equals 1997)
    Where Customers.CustomerID Equals @0 ('ALFKI')

    Select Customers.CustomerID
    From Customers
    Where Customers.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestJoinCustomerOrders">
    Select Customers.ContactName, Orders.OrderID
    From Customers
    Inner Join Orders On Customers.CustomerID Equals Orders.CustomerID
  </baseline>
  <baseline key="TestJoinMultiKey">
    Select *, Orders.CustomerID As CustomerID1, Orders.OrderDate, Orders.OrderID
    From Customers
    Inner Join Orders On (Customers.CustomerID Equals Orders.CustomerID And Customers.CustomerID Equals Orders.CustomerID)
  </baseline>
  <baseline key="TestJoinIntoCustomersOrders">
    Select *
    From Customers
    Left Join Orders On Orders.CustomerID Equals Customers.CustomerID

    Select *
    From Customers
  </baseline>
  <baseline key="TestJoinIntoCustomersOrdersCount">
    Select *, (
    Select Count(All)
    From Orders
    Where Orders.CustomerID Equals Customers.CustomerID
    ) As c0
    From Customers
  </baseline>
  <baseline key="TestJoinIntoDefaultIfEmpty">
    Select *, Orders.CustomerID As CustomerID1, Orders.OrderDate, Orders.OrderID
    From Customers
    Left Join Orders On Orders.CustomerID Equals Customers.CustomerID
  </baseline>
  <baseline key="TestSelectManyCustomerOrders">
    Select Customers.ContactName, Orders.OrderID
    From Customers
    Inner Join Orders On Customers.CustomerID Equals Orders.CustomerID
  </baseline>
  <baseline key="TestMultipleJoinsWithJoinConditionsInWhere">
    Select t2.ProductID
    From Customers
    Inner Join Orders On Orders.CustomerID Equals Customers.CustomerID
    Inner Join Order Details As t2 On Orders.OrderID Equals t2.OrderID
    Where Customers.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestMultipleJoinsWithMissingJoinCondition">
    Select t2.ProductID
    From Customers
    Inner Join Orders On Orders.CustomerID Equals Customers.CustomerID
    Cross Join Order Details As t2
    Where Customers.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestOrderBy">
    Select *
    From Customers
    Order By Customers.CustomerID
  </baseline>
  <baseline key="TestOrderBySelect">
    Select Customers.ContactName
    From Customers
    Order By Customers.CustomerID
  </baseline>
  <baseline key="TestOrderByOrderBy">
    Select Customers.City
    From Customers
    Order By Customers.Country, Customers.CustomerID
  </baseline>
  <baseline key="TestOrderByThenBy">
    Select Customers.City
    From Customers
    Order By Customers.CustomerID, Customers.Country
  </baseline>
  <baseline key="TestOrderByDescending">
    Select Customers.City
    From Customers
    Order By Customers.CustomerID Descending
  </baseline>
  <baseline key="TestOrderByDescendingThenBy">
    Select Customers.City
    From Customers
    Order By Customers.CustomerID Descending, Customers.Country
  </baseline>
  <baseline key="TestOrderByDescendingThenByDescending">
    Select Customers.City
    From Customers
    Order By Customers.CustomerID Descending, Customers.Country Descending
  </baseline>
  <baseline key="TestOrderByJoin">
    Select Customers.CustomerID, Orders.OrderID
    From Customers
    Inner Join Orders On Customers.CustomerID Equals Orders.CustomerID
    Order By Customers.CustomerID, Orders.OrderID
  </baseline>
  <baseline key="TestOrderBySelectMany">
    Select Customers.ContactName, Orders.OrderID
    From Customers
    Inner Join Orders On Customers.CustomerID Equals Orders.CustomerID
    Order By Customers.CustomerID, Orders.OrderID
  </baseline>
  <baseline key="TestGroupBy">
    Select Customers.City
    From Customers
    Group By Customers.City

    Select *
    From Customers
    Where ((Customers.City Equals Null And @n0 Equals Null) Or Customers.City Equals @n0)
  </baseline>
  <baseline key="TestGroupBySelectMany">
    Select t1.City, t1.CompanyName, t1.ContactName, t1.Country, t1.CustomerID, t1.Phone
    From (
    Select t2.City
    From Customers As t2
    Group By t2.City
    ) As t0
    Inner Join Customers As t1 On ((t1.City Equals Null And t0.City Equals Null) Or t1.City Equals t0.City)
  </baseline>
  <baseline key="TestGroupBySum">
    Select Sum(Orders.OrderID) As agg1
    From Orders
    Group By Orders.CustomerID
  </baseline>
  <baseline key="TestGroupByCount">
    Select Count(All) As agg1
    From Orders
    Group By Orders.CustomerID
  </baseline>
  <baseline key="TestGroupByLongCount">
    Select BigCount(All) As agg1
    From Orders
    Group By Orders.CustomerID
  </baseline>
  <baseline key="TestGroupBySumMinMaxAvg">
    Select Sum(Orders.OrderID) As agg1, Min(Orders.OrderID) As agg2, Max(Orders.OrderID) As agg3, Average(Orders.OrderID) As agg4
    From Orders
    Group By Orders.CustomerID
  </baseline>
  <baseline key="TestGroupByWithResultSelector">
    Select Sum(Orders.OrderID) As c0, Min(Orders.OrderID) As c1, Max(Orders.OrderID) As c2, Average(Orders.OrderID) As c3
    From Orders
    Group By Orders.CustomerID
  </baseline>
  <baseline key="TestGroupByWithElementSelectorSum">
    Select Sum(Orders.OrderID) As agg1
    From Orders
    Group By Orders.CustomerID
  </baseline>
  <baseline key="TestGroupByWithElementSelector">
    Select Orders.CustomerID
    From Orders
    Group By Orders.CustomerID

    Select Orders.OrderID
    From Orders
    Where ((Orders.CustomerID Equals Null And @n0 Equals Null) Or Orders.CustomerID Equals @n0)
  </baseline>
  <baseline key="TestGroupByWithElementSelectorSumMax">
    Select Sum(Orders.OrderID) As agg1, Max(Orders.OrderID) As agg2
    From Orders
    Group By Orders.CustomerID
  </baseline>
  <baseline key="TestGroupByWithAnonymousElement">
    Select Sum(Orders.OrderID) As agg1
    From Orders
    Group By Orders.CustomerID
  </baseline>
  <baseline key="TestGroupByWithTwoPartKey">
    Select Sum(Orders.OrderID) As agg2
    From Orders
    Group By Orders.CustomerID, Orders.OrderDate
  </baseline>
  <baseline key="TestOrderByGroupBy">
    Select Sum(Orders.OrderID) As agg1
    From Orders
    Group By Orders.CustomerID
  </baseline>
  <baseline key="TestOrderByGroupBySelectMany">
    Select t1.CustomerID, t1.OrderDate, t1.OrderID
    From (
    Select t2.CustomerID
    From Orders As t2
    Group By t2.CustomerID
    ) As t0
    Inner Join Orders As t1 On ((t1.CustomerID Equals Null And t0.CustomerID Equals Null) Or t1.CustomerID Equals t0.CustomerID)
    Order By t1.OrderID
  </baseline>
  <baseline key="TestSumWithNoArg">
    Select Sum(Orders.OrderID)
    From Orders
  </baseline>
  <baseline key="TestSumWithArg">
    Select Sum(Orders.OrderID)
    From Orders
  </baseline>
  <baseline key="TestCountWithNoPredicate">
    Select Count(All)
    From Orders
  </baseline>
  <baseline key="TestCountWithPredicate">
    Select Count(All)
    From Orders
    Where Orders.CustomerID Equals @0 ('ALFKI')
  </baseline>
  <baseline key="TestDistinct">
    Select Distinct All
    From Customers
  </baseline>
  <baseline key="TestDistinctScalar">
    Select Distinct Customers.City
    From Customers
  </baseline>
  <baseline key="TestOrderByDistinct">
    Select Distinct Customers.City
    From Customers
  </baseline>
  <baseline key="TestDistinctOrderBy">
    Select Distinct Customers.City
    From Customers
    Order By Customers.City
  </baseline>
  <baseline key="TestDistinctGroupBy">
    Select t0.CustomerID
    From (
    Select Distinct Orders.CustomerID, Orders.OrderDate, Orders.OrderID
    From Orders
    ) As t0
    Group By t0.CustomerID

    Select Distinct Orders.CustomerID, Orders.OrderDate, Orders.OrderID
    From Orders
    Where ((Orders.CustomerID Equals Null And @n0 Equals Null) Or Orders.CustomerID Equals @n0)
  </baseline>
  <baseline key="TestGroupByDistinct">
    Select Distinct t0.CustomerID
    From (
    Select Orders.CustomerID
    From Orders
    Group By Orders.CustomerID
    ) As t0

    Select *
    From Orders
    Where ((Orders.CustomerID Equals Null And @n0 Equals Null) Or Orders.CustomerID Equals @n0)
  </baseline>
  <baseline key="TestDistinctCount">
    Select Count(All)
    From (
    Select Distinct All
    From Customers
    ) As t0
  </baseline>
  <baseline key="TestSelectDistinctCount">
    Select Count(All)
    From (
    Select Distinct Customers.City
    From Customers
    ) As t0
  </baseline>
  <baseline key="TestSelectSelectDistinctCount">
    Select Count(All)
    From (
    Select Distinct Customers.City
    From Customers
    ) As t0
  </baseline>
  <baseline key="TestDistinctCountPredicate">
    Select Count(All)
    From (
    Select Distinct All
    From Customers
    Where Customers.CustomerID Equals @0 ('ALFKI')
    ) As t0
  </baseline>
  <baseline key="TestDistinctSumWithArg">
    Select Sum(t0.OrderID)
    From (
    Select Distinct Orders.CustomerID, Orders.OrderDate, Orders.OrderID
    From Orders
    ) As t0
  </baseline>
  <baseline key="TestSelectDistinctSum">
    Select Sum(Distinct Orders.OrderID)
    From
  </baseline>
  <baseline key="TestTake">
    Select (Rows 0-5) Orders.CustomerID, Orders.OrderDate, Orders.OrderID
    From
  </baseline>
  <baseline key="TestTakeDistinct">
    Select Distinct t0.CustomerID, t0.OrderDate, t0.OrderID
    From (
    Select (Rows 0-5) Orders.CustomerID, Orders.OrderDate, Orders.OrderID
    From
    ) As t0
  </baseline>
  <baseline key="TestDistinctTake">
    Select (Rows 0-5) t0.CustomerID, t0.OrderDate, t0.OrderID
    From (
    Select Distinct Orders.CustomerID, Orders.OrderDate, Orders.OrderID
    From
    ) As t0
  </baseline>
  <baseline key="TestDistinctTakeCount">
    Select Count(All)
    From (
    Select (Rows 0-5) t1.CustomerID, t1.OrderDate, t1.OrderID
    From (
    Select Distinct Orders.CustomerID, Orders.OrderDate, Orders.OrderID
    From
    ) As t1
    ) As t0
  </baseline>
  <baseline key="TestTakeDistinctCount">
    Select Count(All)
    From (
    Select Distinct t1.CustomerID, t1.OrderDate, t1.OrderID
    From (
    Select (Rows 0-5) Orders.CustomerID, Orders.OrderDate, Orders.OrderID
    From
    ) As t1
    ) As t0
  </baseline>
  <baseline key="TestSkip">
    Select (Rows 5+) t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From Customers As t0
    Order By t0.ContactName
  </baseline>
  <baseline key="TestTakeSkip">
    Select (Rows 5+) t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select (Rows 0-10) t1.City, t1.CompanyName, t1.ContactName, t1.Country, t1.CustomerID, t1.Phone
    From Customers As t1
    Order By t1.ContactName) As t0
    Order By t0.ContactName
  </baseline>
  <baseline key="TestDistinctSkip">
    Select (Rows 5+) t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select Distinct t1.City, t1.CompanyName, t1.ContactName, t1.Country, t1.CustomerID, t1.Phone
    From Customers As t1
    ) As t0
    Order By t0.ContactName
  </baseline>
  <baseline key="TestSkipTake">
    Select (Rows 5-15) t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From Customers As t0
    Order By t0.ContactName
  </baseline>
  <baseline key="TestDistinctSkipTake">
    Select (Rows 5-15) t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select Distinct t1.City, t1.CompanyName, t1.ContactName, t1.Country, t1.CustomerID, t1.Phone
    From Customers As t1
    ) As t0
    Order By t0.ContactName
  </baseline>
  <baseline key="TestSkipDistinct">
    Select Distinct t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select (Rows 5+) t1.City, t1.CompanyName, t1.ContactName, t1.Country, t1.CustomerID, t1.Phone
    From Customers As t1
    Order By t1.ContactName
    ) As t0
  </baseline>
</baselines>