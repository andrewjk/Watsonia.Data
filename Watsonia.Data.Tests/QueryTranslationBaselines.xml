<?xml version="1.0" encoding="utf-8"?>
<baselines>
  <baseline key="TestMathLog10">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Log10(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathCeiling">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Ceiling(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathRoundToPlace">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Round(o.OrderID, 2) Equals 0
  </baseline>
  <baseline key="TestMathFloor">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Floor(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathTruncate">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Truncate(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestStringCompareToLessThan">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') IsLessThan 0
  </baseline>
  <baseline key="TestStringCompareToLessThanOrEqualTo">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') IsLessThanOrEqualTo 0
  </baseline>
  <baseline key="TestStringCompareToGreaterThan">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') IsGreaterThan 0
  </baseline>
  <baseline key="TestStringCompareToGreaterThanOrEqualTo">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') IsGreaterThanOrEqualTo 0
  </baseline>
  <baseline key="TestStringCompareToEquals">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') Equals 0
  </baseline>
  <baseline key="TestStringCompareToNotEquals">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') NotEquals 0
  </baseline>
  <baseline key="TestStringCompareLessThan">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') IsLessThan 0
  </baseline>
  <baseline key="TestStringCompareLessThanOrEqualTo">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') IsLessThanOrEqualTo 0
  </baseline>
  <baseline key="TestStringCompareGreaterThan">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') IsGreaterThan 0
  </baseline>
  <baseline key="TestStringCompareGreaterThanOrEqualTo">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') IsGreaterThanOrEqualTo 0
  </baseline>
  <baseline key="TestStringCompareEquals">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') Equals 0
  </baseline>
  <baseline key="TestStringCompareNotEquals">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Compare(c.City, 'Seattle') NotEquals 0
  </baseline>
  <baseline key="TestIntCompareTo">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Compare(o.OrderID, 1000) Equals 0
  </baseline>
  <baseline key="TestDecimalCompare">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (Case When o.OrderID Equals 0.0 Then 0 When o.OrderID IsLessThan 0.0 Then -1 Else 1) Equals 0
  </baseline>
  <baseline key="TestDecimalAdd">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID + 0.0) Equals 0.0
  </baseline>
  <baseline key="TestDecimalSubtract">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID - 0.0) Equals 0.0
  </baseline>
  <baseline key="TestDecimalMultiply">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID * 1.0) Equals 1.0
  </baseline>
  <baseline key="TestDecimalDivide">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID / 1.0) Equals 1.0
  </baseline>
  <baseline key="TestDecimalRemainder">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID % 1.0) Equals 0.0
  </baseline>
  <baseline key="TestDecimalNegate">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Negate(o.OrderID) Equals 1.0
  </baseline>
  <baseline key="TestDecimalRoundDefault">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Round(o.OrderID, 0) Equals 0
  </baseline>
  <baseline key="TestDecimalRoundPlaces">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Round(o.OrderID, 2) Equals 0.00
  </baseline>
  <baseline key="TestDecimalTruncate">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Truncate(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestDecimalCeiling">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Ceiling(o.OrderID) Equals 0.0
  </baseline>
  <baseline key="TestDecimalFloor">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Floor(o.OrderID) Equals 0.0
  </baseline>
  <baseline key="TestDecimalLessThan">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where o.OrderID IsLessThan 0.0
  </baseline>
  <baseline key="TestIntLessThan">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where o.OrderID IsLessThan 0
  </baseline>
  <baseline key="TestIntLessThanOrEqual">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where o.OrderID IsLessThanOrEqualTo 0
  </baseline>
  <baseline key="TestIntGreaterThan">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where o.OrderID IsGreaterThan 0
  </baseline>
  <baseline key="TestIntGreaterThanOrEqual">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where o.OrderID IsGreaterThanOrEqualTo 0
  </baseline>
  <baseline key="TestIntEqual">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where o.OrderID Equals 0
  </baseline>
  <baseline key="TestIntNotEqual">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where o.OrderID NotEquals 0
  </baseline>
  <baseline key="TestIntAdd">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID + 0) Equals 0
  </baseline>
  <baseline key="TestIntSubtract">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID - 0) Equals 0
  </baseline>
  <baseline key="TestIntMultiply">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID * 1) Equals 1
  </baseline>
  <baseline key="TestIntDivide">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID / 1) Equals 1
  </baseline>
  <baseline key="TestIntModulo">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID % 1) Equals 0
  </baseline>
  <baseline key="TestIntLeftShift">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID &lt;&lt; 1) Equals 0
  </baseline>
  <baseline key="TestIntRightShift">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID &gt;&gt; 1) Equals 0
  </baseline>
  <baseline key="TestIntBitwiseAnd">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID &amp; 1) Equals 0
  </baseline>
  <baseline key="TestIntBitwiseOr">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID | 1) Equals 1
  </baseline>
  <baseline key="TestIntBitwiseExclusiveOr">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID ^ 1) Equals 1
  </baseline>
  <baseline key="TestIntBitwiseNot">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where ~o.OrderID? Equals 0
  </baseline>
  <baseline key="TestIntNegate">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Negate o.OrderID Equals -1
  </baseline>
  <baseline key="TestAnd">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID IsGreaterThan 0 And o.OrderID IsLessThan 2000)
  </baseline>
  <baseline key="TestOr">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderID IsLessThan 5 Or o.OrderID IsGreaterThan 10)
  </baseline>
  <baseline key="TestNot">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Not o.OrderID Equals 0
  </baseline>
  <baseline key="TestEqualNull">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals Null
  </baseline>
  <baseline key="TestEqualNullReverse">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Null Equals c.City
  </baseline>
  <baseline key="TestConditional">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (Case When o.CustomerID Equals 'ALFKI' Then 1000 Else 0) Equals 1000
  </baseline>
  <baseline key="TestConditional2">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (Case When o.CustomerID Equals 'ALFKI' Then 1000 When o.CustomerID Equals 'ABCDE' Then 2000 Else 0) Equals 1000
  </baseline>
  <baseline key="TestConditionalTestIsValue">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (Case o.OrderID When True Then 100 Else 200) Equals 100
  </baseline>
  <baseline key="TestConditionalResultsArePredicates">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (Case When o.CustomerID Equals 'ALFKI' Then (Case When o.OrderID IsLessThan 10 Then True Else False) Else (Case When o.OrderID IsGreaterThan 10 Then True Else False)) NotEquals False
  </baseline>
  <baseline key="TestSelectManyJoined">
    Select c.ContactName, o.OrderDate
    From Customers As c
    Inner Join Orders On o.CustomerID Equals c.CustomerID
  </baseline>
  <baseline key="TestSelectManyJoinedDefaultIfEmpty">
    Select c.ContactName, o.OrderDate
    From Customers As c
    Left Join Orders On o.CustomerID Equals c.CustomerID
  </baseline>
  <baseline key="TestSelectWhereAssociation">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Left Join Customers On c.CustomerID Equals o.CustomerID
    Where c.City Equals 'Seattle'
  </baseline>
  <baseline key="TestSelectWhereAssociations">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Left Join Customers On c.CustomerID Equals o.CustomerID
    Where c.City Equals 'Seattle' And c.Phone NotEquals '555 555 5555'
  </baseline>
  <baseline key="TestSelectWhereAssociationTwice">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Left Join Customers On c.CustomerID Equals o.CustomerID
    Where c.City Equals 'Seattle' And c.Phone NotEquals '555 555 5555'
  </baseline>
  <baseline key="TestSelectAssociation">
    Select c.CustomerID As CustomerID1, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Orders As o
    Left Join Customers On c.CustomerID Equals o.CustomerID
  </baseline>
  <baseline key="TestSelectAssociations">
    Select c.City, c.CompanyName, c.ContactName, c.Country, c.CustomerID As CustomerID1, c.Phone
    From Orders As o
    Left Join Customers On c.CustomerID Equals o.CustomerID
  </baseline>
  <baseline key="TestSelectAssociationsWhereAssociations">
    Select c.City, c.CompanyName, c.ContactName, c.Country, c.CustomerID As CustomerID1, c.Phone
    From Orders As o
    Left Join Customers On c.CustomerID Equals o.CustomerID
    Where c.City Equals 'Seattle' And c.Phone NotEquals '555 555 5555'
  </baseline>
  <baseline key="TestSingletonAssociationWithMemberAccess">
    Select c.City, c.CompanyName, c.ContactName, c.Country, c.CustomerID As CustomerID1, c.Phone
    From Orders As o
    Left Join Customers On c.CustomerID Equals o.CustomerID
    Where c.City Equals 'Seattle' And c.Phone NotEquals '555 555 5555'
  </baseline>
  <baseline key="TestCompareDateTimesWithDifferentNullability">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where (o.OrderDate IsLessThan '1/01/2013 12:00:00 AM' And o.OrderDate IsLessThan '1/01/2013 12:00:00 AM')
  </baseline>
  <baseline key="TestContainsWithEmptyLocalList">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID IsIn { }
  </baseline>
  <baseline key="TestContainsWithSubquery2">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID IsIn (
    Select c.CustomerID
    From Customers As c
    Where c.City Equals 'London'
    )
  </baseline>
  <baseline key="TestCombineQueriesDeepNesting">
    Select Order Details.OrderID, Order Details.ProductID
    From Order Details
    Where Exists (
    Select *
    From Orders As o
    Where (Exists (
    Select *
    From Customers As c
    Where (c.ContactName StartsWith 'xxx' And c.CustomerID Equals o.CustomerID)
    ) And o.OrderID Equals Order Details.OrderID)
    )
  </baseline>
  <baseline key="TestLetWithSubquery">
    Select *, (
    Select Count(*)
    From Orders As o
    Where o.CustomerID Equals c.CustomerID
    )
    From Customers As c
  </baseline>
  <baseline key="TestSkipTakeDistinct">
    Select Distinct (Rows 5-15) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
  <baseline key="TestTakeSkipDistinct">
    Select Distinct t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select (Rows 5+) t1.City, t1.CompanyName, t1.ContactName, t1.Country, t1.CustomerID, t1.Phone
    From (
    Select (Rows 0-10) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
    ) As t1
    Order By t1.ContactName
    ) As t0
  </baseline>
  <baseline key="TestFirst">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
  <baseline key="TestFirstPredicate">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName
  </baseline>
  <baseline key="TestWhereFirst">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName
  </baseline>
  <baseline key="TestFirstOrDefault">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
  <baseline key="TestFirstOrDefaultPredicate">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName
  </baseline>
  <baseline key="TestWhereFirstOrDefault">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName
  </baseline>
  <baseline key="TestReverse">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName Descending
  </baseline>
  <baseline key="TestReverseReverse">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
  <baseline key="TestReverseWhereReverse">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName
  </baseline>
  <baseline key="TestReverseTakeReverse">
    Select t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select (Rows 0-5) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName Descending
    ) As t0
    Order By t0.ContactName
  </baseline>
  <baseline key="TestReverseWhereTakeReverse">
    Select t0.City, t0.CompanyName, t0.ContactName, t0.Country, t0.CustomerID, t0.Phone
    From (
    Select (Rows 0-5) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName Descending
    ) As t0
    Order By t0.ContactName
  </baseline>
  <baseline key="TestLast">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName Descending
  </baseline>
  <baseline key="TestLastPredicate">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName Descending
  </baseline>
  <baseline key="TestWhereLast">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName Descending
  </baseline>
  <baseline key="TestLastOrDefault">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName Descending
  </baseline>
  <baseline key="TestLastOrDefaultPredicate">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName Descending
  </baseline>
  <baseline key="TestWhereLastOrDefault">
    Select (Row 0) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
    Order By c.ContactName Descending
  </baseline>
  <baseline key="TestSingle">
    Select g_1.CustomerID, g_1.City, g_1.CompanyName, g_1.ContactName, g_1.Country, g_1.Phone
    From Customers As g_1
  </baseline>
  <baseline key="TestSinglePredicate">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestWhereSingle">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestSingleOrDefault">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
  </baseline>
  <baseline key="TestSingleOrDefaultPredicate">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestWhereSingleOrDefault">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestAnyWithSubquery">
    Select Any c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Exists (
    Select *
    From Orders As o
    Where (o.CustomerID Equals c.CustomerID And DatePart(Year, o.OrderDate) Equals 1997)
    )
  </baseline>
  <baseline key="TestAnyWithSubqueryNoPredicate">
    Select Any c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Exists (
    Select *
    From Orders As o
    Where o.CustomerID Equals c.CustomerID
    )
  </baseline>
  <baseline key="TestAnyWithLocalCollection">
    Select Any c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID Equals 'ABCDE' Or c.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestAnyTopLevel">
    Select Any g_1.CustomerID, g_1.City, g_1.CompanyName, g_1.ContactName, g_1.Country, g_1.Phone
    From Customers As g_1
  </baseline>
  <baseline key="TestAllWithSubquery">
    Select All c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Not Exists (
    Select *
    From Orders As o
    Where (o.CustomerID Equals c.CustomerID And Not DatePart(Year, o.OrderDate) Equals 1997)
    )
  </baseline>
  <baseline key="TestAllWithLocalCollection">
    Select All c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where (c.ContactName Contains 'a' And c.ContactName Contains 'e')
  </baseline>
  <baseline key="TestAllTopLevel">
    Select All c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.ContactName StartsWith 'a'
  </baseline>
  <baseline key="TestContainsWithSubquery">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID IsIn (
    Select o.CustomerID
    From Orders As o
    )
  </baseline>
  <baseline key="TestContainsWithLocalCollection">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID IsIn { 'ABCDE', 'ALFKI' }
  </baseline>
  <baseline key="TestContainsTopLevel">
    Select Contains 'ALFKI' In c.CustomerID
    From Customers As c
  </baseline>
  <baseline key="TestCoalesce">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Coalesce(c.City, 'Seattle') Equals 'Seattle'
  </baseline>
  <baseline key="TestCoalesce2">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Coalesce(c.City, c.Country, 'Seattle') Equals 'Seattle'
  </baseline>
  <baseline key="TestStringLength">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Length(c.City) Equals 7
  </baseline>
  <baseline key="TestStringStartsWithLiteral">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.ContactName StartsWith 'M'
  </baseline>
  <baseline key="TestStringStartsWithColumn">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.ContactName StartsWith c.ContactName
  </baseline>
  <baseline key="TestStringEndsWithLiteral">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.ContactName EndsWith 's'
  </baseline>
  <baseline key="TestStringEndsWithColumn">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.ContactName EndsWith c.ContactName
  </baseline>
  <baseline key="TestStringContainsLiteral">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.ContactName Contains 'and'
  </baseline>
  <baseline key="TestStringContainsColumn">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.ContactName Contains c.ContactName
  </baseline>
  <baseline key="TestStringConcatImplicit2Args">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where (c.ContactName + 'X') Equals 'X'
  </baseline>
  <baseline key="TestStringConcatExplicit2Args">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Concat(c.ContactName, 'X') Equals 'X'
  </baseline>
  <baseline key="TestStringConcatExplicit3Args">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Concat(c.ContactName, 'X', c.Country) Equals 'X'
  </baseline>
  <baseline key="TestStringConcatExplicitNArgs">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Concat(c.ContactName, 'X', c.Country) Equals 'X'
  </baseline>
  <baseline key="TestStringIsNullOrEmpty">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where (c.City Equals Null Or c.City Equals '')
  </baseline>
  <baseline key="TestStringToUpper">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where ToUpper(c.City) Equals 'SEATTLE'
  </baseline>
  <baseline key="TestStringToLower">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where ToLower(c.City) Equals 'seattle'
  </baseline>
  <baseline key="TestStringSubstring">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Substring(c.City, 0, 4) Equals 'Seat'
  </baseline>
  <baseline key="TestStringSubstringNoLength">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Substring(c.City, 4, 8000) Equals 'tle'
  </baseline>
  <baseline key="TestStringIndexOf">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where IndexOf(c.City, 'tt') Equals 4
  </baseline>
  <baseline key="TestStringIndexOfChar">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where IndexOf(c.City, 't') Equals 4
  </baseline>
  <baseline key="TestStringTrim">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Trim(c.City) Equals 'Seattle'
  </baseline>
  <baseline key="TestStringToString">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'Seattle'
  </baseline>
  <baseline key="TestStringReplace">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Replace(c.City, 'ea', 'ae') Equals 'Saettle'
  </baseline>
  <baseline key="TestStringReplaceChars">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Replace(c.City, 'e', 'y') Equals 'Syattly'
  </baseline>
  <baseline key="TestStringRemove">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Remove(c.City, 1, 2) Equals 'Sttle'
  </baseline>
  <baseline key="TestStringRemoveNoCount">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where Remove(c.City, 4, 8000) Equals 'Seat'
  </baseline>
  <baseline key="TestDateTimeConstructYmd">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where o.OrderDate Equals DateNew(DatePart(Year, o.OrderDate), 1, 1)
  </baseline>
  <baseline key="TestDateTimeConstructYmdhms">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where o.OrderDate Equals DateNew(DatePart(Year, o.OrderDate), 1, 1, 10, 25, 55)
  </baseline>
  <baseline key="TestDateTimeDay">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where DatePart(Day, o.OrderDate) Equals 5
  </baseline>
  <baseline key="TestDateTimeMonth">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where DatePart(Month, o.OrderDate) Equals 12
  </baseline>
  <baseline key="TestDateTimeYear">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where DatePart(Year, o.OrderDate) Equals 1997
  </baseline>
  <baseline key="TestDateTimeHour">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where DatePart(Hour, o.OrderDate) Equals 6
  </baseline>
  <baseline key="TestDateTimeMinute">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where DatePart(Minute, o.OrderDate) Equals 32
  </baseline>
  <baseline key="TestDateTimeSecond">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where DatePart(Second, o.OrderDate) Equals 47
  </baseline>
  <baseline key="TestDateTimeMillisecond">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where DatePart(Millisecond, o.OrderDate) Equals 200
  </baseline>
  <baseline key="TestDateTimeDayOfYear">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where DatePart(DayOfYear, o.OrderDate) Equals 360
  </baseline>
  <baseline key="TestDateTimeDayOfWeek">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where DatePart(DayOfWeek, o.OrderDate) Equals 5
  </baseline>
  <baseline key="TestMathAbs">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Absolute(o.OrderID) Equals 10
  </baseline>
  <baseline key="TestMathAtan">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Atan(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathCos">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Cos(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathSin">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Sin(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathTan">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Tan(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathExp">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Exponential(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathLog">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Log(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathSqrt">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Root(o.OrderID, 2) Equals 0
  </baseline>
  <baseline key="TestMathPow">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Power((Case When o.OrderID IsLessThan 1000 Then 1 Else 2), 3) Equals 0
  </baseline>
  <baseline key="TestMathRoundDefault">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Round(o.OrderID, 0) Equals 0
  </baseline>
  <baseline key="TestMathAcos">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Acos(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathAsin">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Asin(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestMathAtan2">
    Select o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where Atan2(o.OrderID) Equals 0
  </baseline>
  <baseline key="TestWhere">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals 'London'
  </baseline>
  <baseline key="TestWhereTrue">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where True NotEquals False
  </baseline>
  <baseline key="TestWhereFalse">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where False NotEquals False
  </baseline>
  <baseline key="TestCompareEntityEqual">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestCompareEntityNotEqual">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID NotEquals 'ALFKI'
  </baseline>
  <baseline key="TestCompareConstructedEqual">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals { x = London }
  </baseline>
  <baseline key="TestCompareConstructedMultiValueEqual">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where (c.City, c.Country) Equals { x = London, y = UK }
  </baseline>
  <baseline key="TestCompareConstructedMultiValueNotEqual">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where (c.City, c.Country) NotEquals { x = London, y = UK }
  </baseline>
  <baseline key="TestCompareConstructed">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.City Equals { x = London }
  </baseline>
  <baseline key="TestSelectScalar">
    Select c.City
    From Customers As c
  </baseline>
  <baseline key="TestSelectAnonymousOne">
    Select c.City
    From Customers As c
  </baseline>
  <baseline key="TestSelectAnonymousTwo">
    Select c.City, c.Phone
    From Customers As c
  </baseline>
  <baseline key="TestSelectAnonymousThree">
    Select c.City, c.Phone, c.Country
    From Customers As c
  </baseline>
  <baseline key="TestSelectCustomerTable">
    Select g_0.CustomerID, g_0.City, g_0.CompanyName, g_0.ContactName, g_0.Country, g_0.Phone
    From Customers As g_0
  </baseline>
  <baseline key="TestSelectCustomerIdentity">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
  </baseline>
  <baseline key="TestSelectAnonymousWithObject">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
  </baseline>
  <baseline key="TestSelectAnonymousNested">
    Select c.City, c.Country
    From Customers As c
  </baseline>
  <baseline key="TestSelectAnonymousEmpty">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
  </baseline>
  <baseline key="TestSelectAnonymousLiteral">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
  </baseline>
  <baseline key="TestSelectConstantInt">
    Select 0
    From Customers As c
  </baseline>
  <baseline key="TestSelectConstantNullString">
    Select Null
    From Customers As c
  </baseline>
  <baseline key="TestSelectLocal">
    Select 10
    From Customers As c
  </baseline>
  <baseline key="TestSelectNestedCollection">
    Select c.CustomerID
    From Customers As c
    Where c.City Equals 'London'

    Select o.OrderID
    From Orders As o
    Where (o.CustomerID Equals @n0 And DatePart(Year, o.OrderDate) Equals 1997)
  </baseline>
  <baseline key="TestSelectNestedCollectionInAnonymousType">
    Select t1.CustomerID, t1.OrderID
    From Customers As c
    Left Join Orders As t1 On (t1.CustomerID Equals c.CustomerID And DatePart(Year, t1.OrderDate) Equals 1997)
    Where c.CustomerID Equals 'ALFKI'

    Select c.CustomerID
    From Customers As c
    Where c.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestJoinCustomerOrders">
    Select c.ContactName, o.OrderID
    From Customers As c
    Inner Join Orders On c.CustomerID Equals o.CustomerID
  </baseline>
  <baseline key="TestJoinMultiKey">
    Select *, o.CustomerID As CustomerID1, o.OrderDate, o.OrderID
    From Customers As c
    Inner Join Orders On (c.CustomerID Equals o.CustomerID And c.CustomerID Equals o.CustomerID)
  </baseline>
  <baseline key="TestJoinIntoCustomersOrders">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Left Join Orders On o.CustomerID Equals c.CustomerID

    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
  </baseline>
  <baseline key="TestJoinIntoCustomersOrdersCount">
    Select *, (
    Select Count(*)
    From Orders As o
    Where o.CustomerID Equals c.CustomerID
    ) As c0
    From Customers As c
  </baseline>
  <baseline key="TestJoinIntoDefaultIfEmpty">
    Select *, o.CustomerID As CustomerID1, o.OrderDate, o.OrderID
    From Customers As c
    Left Join Orders On o.CustomerID Equals c.CustomerID
  </baseline>
  <baseline key="TestSelectManyCustomerOrders">
    Select c.ContactName, o.OrderID
    From Customers As c
    Inner Join Orders On c.CustomerID Equals o.CustomerID
  </baseline>
  <baseline key="TestMultipleJoinsWithJoinConditionsInWhere">
    Select t2.ProductID
    From Customers As c
    Inner Join Orders On o.CustomerID Equals c.CustomerID
    Inner Join Order Details As t2 On o.OrderID Equals t2.OrderID
    Where c.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestMultipleJoinsWithMissingJoinCondition">
    Select t2.ProductID
    From Customers As c
    Inner Join Orders On o.CustomerID Equals c.CustomerID
    Cross Join Order Details As t2
    Where c.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestOrderBy">
    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.CustomerID
  </baseline>
  <baseline key="TestOrderBySelect">
    Select c.ContactName
    From Customers As c
    Order By c.CustomerID
  </baseline>
  <baseline key="TestOrderByOrderBy">
    Select c.City
    From Customers As c
    Order By c.CustomerID, c.Country
  </baseline>
  <baseline key="TestOrderByThenBy">
    Select c.City
    From Customers As c
    Order By c.CustomerID, c.Country
  </baseline>
  <baseline key="TestOrderByDescending">
    Select c.City
    From Customers As c
    Order By c.CustomerID Descending
  </baseline>
  <baseline key="TestOrderByDescendingThenBy">
    Select c.City
    From Customers As c
    Order By c.CustomerID Descending, c.Country
  </baseline>
  <baseline key="TestOrderByDescendingThenByDescending">
    Select c.City
    From Customers As c
    Order By c.CustomerID Descending, c.Country Descending
  </baseline>
  <baseline key="TestOrderByJoin">
    Select c.CustomerID, o.OrderID
    From Customers As c
    Inner Join Orders On c.CustomerID Equals o.CustomerID
    Order By c.CustomerID, o.OrderID
  </baseline>
  <baseline key="TestOrderBySelectMany">
    Select c.ContactName, o.OrderID
    From Customers As c
    Inner Join Orders On c.CustomerID Equals o.CustomerID
    Order By c.CustomerID, o.OrderID
  </baseline>
  <baseline key="TestGroupBy">
    Select c.City
    From Customers As c
    Group By c.City

    Select c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where ((c.City Equals Null And @n0 Equals Null) Or c.City Equals @n0)
  </baseline>
  <baseline key="TestGroupBySelectMany">
    Select t1.City, t1.CompanyName, t1.ContactName, t1.Country, t1.CustomerID, t1.Phone
    From (
    Select t2.City
    From Customers As c As t2
    Group By t2.City
    ) As t0
    Inner Join Customers As t1 On ((t1.City Equals Null And t0.City Equals Null) Or t1.City Equals t0.City)
  </baseline>
  <baseline key="TestGroupBySum">
    Select Sum(o.OrderID) As agg1
    From Orders As o
    Group By o.CustomerID
  </baseline>
  <baseline key="TestGroupByCount">
    Select Count(*) As agg1
    From Orders As o
    Group By o.CustomerID
  </baseline>
  <baseline key="TestGroupByLongCount">
    Select BigCount(*) As agg1
    From Orders As o
    Group By o.CustomerID
  </baseline>
  <baseline key="TestGroupBySumMinMaxAvg">
    Select Sum(o.OrderID) As agg1, Min(o.OrderID) As agg2, Max(o.OrderID) As agg3, Average(o.OrderID) As agg4
    From Orders As o
    Group By o.CustomerID
  </baseline>
  <baseline key="TestGroupByWithResultSelector">
    Select Sum(o.OrderID) As c0, Min(o.OrderID) As c1, Max(o.OrderID) As c2, Average(o.OrderID) As c3
    From Orders As o
    Group By o.CustomerID
  </baseline>
  <baseline key="TestGroupByWithElementSelectorSum">
    Select Sum(o.OrderID) As agg1
    From Orders As o
    Group By o.CustomerID
  </baseline>
  <baseline key="TestGroupByWithElementSelector">
    Select o.CustomerID
    From Orders As o
    Group By o.CustomerID

    Select o.OrderID
    From Orders As o
    Where ((o.CustomerID Equals Null And @n0 Equals Null) Or o.CustomerID Equals @n0)
  </baseline>
  <baseline key="TestGroupByWithElementSelectorSumMax">
    Select Sum(o.OrderID) As agg1, Max(o.OrderID) As agg2
    From Orders As o
    Group By o.CustomerID
  </baseline>
  <baseline key="TestGroupByWithAnonymousElement">
    Select Sum(o.OrderID) As agg1
    From Orders As o
    Group By o.CustomerID
  </baseline>
  <baseline key="TestGroupByWithTwoPartKey">
    Select Sum(o.OrderID) As agg2
    From Orders As o
    Group By o.CustomerID, o.OrderDate
  </baseline>
  <baseline key="TestOrderByGroupBy">
    Select Sum(o.OrderID) As agg1
    From Orders As o
    Group By o.CustomerID
  </baseline>
  <baseline key="TestOrderByGroupBySelectMany">
    Select t1.CustomerID, t1.OrderDate, t1.OrderID
    From (
    Select t2.CustomerID
    From Orders As o As t2
    Group By t2.CustomerID
    ) As t0
    Inner Join Orders As t1 On ((t1.CustomerID Equals Null And t0.CustomerID Equals Null) Or t1.CustomerID Equals t0.CustomerID)
    Order By t1.OrderID
  </baseline>
  <baseline key="TestSumWithNoArg">
    Select Sum(o.OrderID)
    From Orders As o
  </baseline>
  <baseline key="TestSumWithArg">
    Select Sum(o.OrderID)
    From Orders As o
  </baseline>
  <baseline key="TestCountWithNoPredicate">
    Select Count(*)
    From Orders As g_1
  </baseline>
  <baseline key="TestCountWithPredicate">
    Select Count(*)
    From Orders As o
    Where o.CustomerID Equals 'ALFKI'
  </baseline>
  <baseline key="TestDistinct">
    Select Distinct g_1.CustomerID, g_1.City, g_1.CompanyName, g_1.ContactName, g_1.Country, g_1.Phone
    From Customers As g_1
  </baseline>
  <baseline key="TestDistinctScalar">
    Select Distinct c.City
    From Customers As c
  </baseline>
  <baseline key="TestOrderByDistinct">
    Select Distinct c.City
    From Customers As c
    Order By c.CustomerID
  </baseline>
  <baseline key="TestDistinctOrderBy">
    Select Distinct c.City
    From Customers As c
    Order By c.City
  </baseline>
  <baseline key="TestDistinctGroupBy">
    Select t0.CustomerID
    From (
    Select Distinct o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    ) As t0
    Group By t0.CustomerID

    Select Distinct o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    Where ((o.CustomerID Equals Null And @n0 Equals Null) Or o.CustomerID Equals @n0)
  </baseline>
  <baseline key="TestGroupByDistinct">
    Select Distinct t0.CustomerID
    From (
    Select o.CustomerID
    From Orders As o
    Group By o.CustomerID
    ) As t0

    Select *
    From Orders As o
    Where ((o.CustomerID Equals Null And @n0 Equals Null) Or o.CustomerID Equals @n0)
  </baseline>
  <baseline key="TestDistinctCount">
    Select Distinct Count(*)
    From Customers As g_2
  </baseline>
  <baseline key="TestSelectDistinctCount">
    Select Count(*)
    From (
    Select Distinct c.City
    From Customers As c
    ) As t0
  </baseline>
  <baseline key="TestSelectSelectDistinctCount">
    Select Count(*)
    From (
    Select Distinct c.City
    From Customers As c
    ) As t0
  </baseline>
  <baseline key="TestDistinctCountPredicate">
    Select Count(*)
    From (
    Select Distinct c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Where c.CustomerID Equals 'ALFKI'
    ) As t0
  </baseline>
  <baseline key="TestDistinctSumWithArg">
    Select Sum(t0.OrderID)
    From (
    Select Distinct o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
    ) As t0
  </baseline>
  <baseline key="TestSelectDistinctSum">
    Select Sum(Distinct o.OrderID)
    From Orders As o
  </baseline>
  <baseline key="TestTake">
    Select (Rows 0-5) o.OrderID, o.CustomerID, o.OrderDate
    From Orders As o
  </baseline>
  <baseline key="TestTakeDistinct">
    Select Distinct t0.CustomerID, t0.OrderDate, t0.OrderID
    From (
    Select (Rows 0-5) o.OrderID, o.CustomerID, o.OrderDate
    From
    ) As t0
  </baseline>
  <baseline key="TestDistinctTake">
    Select Distinct (Rows 0-5) g_2.OrderID, g_2.CustomerID, g_2.OrderDate
    From Orders As g_2
  </baseline>
  <baseline key="TestDistinctTakeCount">
    Select Count(*)
    From (
    Select (Rows 0-5) t1.CustomerID, t1.OrderDate, t1.OrderID
    From (
    Select Distinct o.OrderID, o.CustomerID, o.OrderDate
    From
    ) As t1
    ) As t0
  </baseline>
  <baseline key="TestTakeDistinctCount">
    Select Count(*)
    From (
    Select Distinct t1.CustomerID, t1.OrderDate, t1.OrderID
    From (
    Select (Rows 0-5) o.OrderID, o.CustomerID, o.OrderDate
    From
    ) As t1
    ) As t0
  </baseline>
  <baseline key="TestSkip">
    Select (Rows 5+) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
  <baseline key="TestTakeSkip">
    Select (Rows 5-15) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
  <baseline key="TestDistinctSkip">
    Select Distinct (Rows 5+) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
  <baseline key="TestSkipTake">
    Select (Rows 5-15) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
  <baseline key="TestDistinctSkipTake">
    Select Distinct (Rows 5-15) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
  <baseline key="TestSkipDistinct">
    Select Distinct (Rows 5+) c.CustomerID, c.City, c.CompanyName, c.ContactName, c.Country, c.Phone
    From Customers As c
    Order By c.ContactName
  </baseline>
</baselines>